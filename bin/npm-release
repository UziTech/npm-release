#!/usr/bin/env node

var spawn = require('child_process').spawn,
    exec = require('child_process').exec,
    path = require('path'),
    fs = require('fs'),
    colors = require('colors'),
    version = process.argv[2],
    relasePath = path.resolve(__dirname, './git-release');

var exit = function (str) {
  console.log([].slice.call(arguments).join(' ').red);
  process.exit(-1);
};

var error = exit.bind(null, 'Error:');

var success = function () {
  console.log([].slice.call(arguments).join(' ').green);
};

var getCurrentVersion = function () {
  var pkg;
  try {
    pkg = JSON.parse(fs.readFileSync(path.resolve(process.cwd(), './package.json')));
  } catch(e) {
    error('Could not open a package.json.');
  }
  return pkg.version;
};

var oldVersion = getCurrentVersion();

if (!oldVersion) error('No version in package.json found.');
if (!version) error('No version supplied.');

// Run npm verison (tags & commits)
success('Updating version...');
var npm = spawn('npm', ['version', version, '-m', "Release %s."]);
npm.stdout.pipe(process.stdout);
npm.stderr.pipe(process.stderr);

npm.on('close', function (code) {
  if (code !== 0) return error('npm version. Exiting.');

  success('Version bumped from', oldVersion, 'to', getCurrentVersion());
  success('Pushing...');

  // Run git-release (tag & push)
  var release = spawn('sh', [relasePath, getCurrentVersion()]);
  release.stdout.pipe(process.stdout);
  release.stderr.pipe(process.stderr);
  release.on('close', function (code) {
    if (code !== 0) return error('git-release. Exiting.');

    success('Pushed.');
    success('Publishing to npm...');

    // Publish to npm
    var publish = spawn('npm', ['publish']);
    publish.stdout.pipe(process.stdout);
    publish.stderr.pipe(process.stderr);
    publish.on('close', function (code) {
      if (code !== 0) return error('npm publish. Exiting.');

      success('Published to npm.');
      success('Released new version ' + getCurrentVersion() + ' successfully.');

    });
  });
});

